from aiogram.utils.callback_data import CallbackData
from cgf.config import *
from bdbaza import sqlite as k
from aiogram import types
from aiogram.types import InlineKeyboardMarkup,InlineKeyboardButton, ReplyKeyboardMarkup,KeyboardButton
from bdbaza import sqlite as k




def start_ikb(): #–∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    markup=ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏'))
    markup.add(KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤'))
    markup.add(KeyboardButton('/admin –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'))
    return markup

dinam=CallbackData('markup','action') #—à–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Å–ª—É–≥
mem=CallbackData('markup','action')
kewo=CallbackData('markup','action')
klient=CallbackData('markup','action')
kaw=CallbackData('markup','action')





def genmarkup(data): # –ø–µ—Ä–µ–¥–∞—ë–º –≤ —Ñ—É–Ω–∫—Ü–∏—é data, –∫–æ—Ä—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ sql,–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    markup = InlineKeyboardMarkup(row_width=2) # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    for i in data: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if i[2]!='': #–µ—Å–ª–∏ –µ—Å—Ç—å —é–∑–µ—Ä –∏–¥, –∑–Ω–∞—á–∏—Ç –∑–∞–ø–∏—Å—å –Ω–µ –ø—É—Å—Ç–∞—è
            markup.insert(InlineKeyboardButton(f'{i[1]} \n'
                                               f'üî•üî•üî•–ó–∞–ø–∏—Å—åüî•üî•üî•', callback_data=dinam.new(i[0])))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
        else:
            markup.insert(InlineKeyboardButton(i[1], callback_data=dinam.new(i[0]))) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    return markup #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


def get_user(data,ur): # –ø–µ—Ä–µ–¥–∞—ë–º –≤ —Ñ—É–Ω–∫—Ü–∏—é data, –∫–æ—Ä—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ sql,–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    markup = InlineKeyboardMarkup(row_width=1) # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    for i in data: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        markup.insert(InlineKeyboardButton(f'{i[1]} {i[3]}. –í—Ä–µ–º—è: {i[2]}', callback_data=klient.new(i[0]))) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—éüèÉ',url=ur))
    return markup #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

def danet():
    markup = InlineKeyboardMarkup(row_width=2)  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è',callback_data=kewo.new('delet_time')))
    return markup


def inl_ikb():
    markup = InlineKeyboardMarkup(row_width=4)  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è',callback_data=mem.new('delet_time')))
    markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å(–µ—Å–ª–∏ –µ—Å—Ç—å)',callback_data=mem.new('delet_zapis')))
    markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Å—é –¥–∞—Ç—É —Å–æ –≤—Å–µ–º –≤—Ä–µ–º–µ–Ω–µ–º', callback_data=mem.new('delet_date')))
    return markup




##########################–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–≤–µ—Ä—Ö—É###################################


#—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
async def rych_start(message: types.Message): #–∑–∞–ø–∏—Å—å –ø–æ–¥ –∫–ª—é—á –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –µ–∫—Å–µ–ª—è —Å—Ä–∞–∑—É
    if admin_key== str(message.chat.id) or admin_key2== str(message.chat.id):
        await message.answer('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:',reply_markup=start_ikb())
#–í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç —Å –∫–æ–ª–±–µ–∫–∞–º–∏
async def show_zapisi(message:types.Message,state:FSMContext):
    kek = await k.take_show_zapisi() #–≤—ã–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
    for i in kek: #i —ç—Ç–æ –º—ã –±–µ—Ä–µ–º –¥–∞—Ç—É –∏–∑ –∫–µ–∫–∞
        result=await k.take_show_time(i[0])
        await message.answer(f'–î–∞—Ç–∞: {i[0]}',reply_markup=genmarkup(result)) #–ø–æ–ª—É—á–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–ª–ª–±–µ–∫–æ–º –∏–∑ –¥–∞—Ç–µ –∏–¥
    await Admin_Control.take_zapis.set() #–ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–∞—Ç

#–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ –¥–∞—Ç–∞–º
async def take_zapis(callback:types.CallbackQuery,callback_data: dict,state:FSMContext):
    id = callback_data['action']
    await state.update_data(id_date=callback_data['action']) #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    result =await k.get_one_zapis(id)
    await state.update_data(day_date=result[1]) #—Å–æ—Ö—Ä–∞–Ω—è—é –¥–µ–Ω—å –¥–∞—Ç—ã
    await state.update_data(date_time=result[2])#—Å–æ—Ö—Ä–∞–Ω—è—é –≤—Ä–µ–º—è –¥–∞—Ç—ã
    await state.update_data(user_id='')  # —Å–æ—Ö—Ä–∞–Ω—è—é –≤—Ä–µ–º—è –¥–∞—Ç—ã
    result2 = await state.get_data()
    if result[4]!='':
        await state.update_data(user_id=result[4])  # —Å–æ—Ö—Ä–∞–Ω—è—é –≤—Ä–µ–º—è –¥–∞—Ç—ã
        await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {result[1]}. –í—Ä–µ–º—è: {result[2]}. –ò–º–µ–µ—Ç—Å—è –∑–∞–ø–∏—Å—å "{result[3]}"\n'
                                      f'–ü—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç —Å—Ç–µ—Ä—Ç–∞ –∏ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É \n'
                                      f'–í–≤–µ–¥–∏—Ç–µ /admin –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',reply_markup=inl_ikb())
    else:
        await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {result[1]}. –í—Ä–µ–º—è: {result[2]}\n'
                                      f'–í–≤–µ–¥–∏—Ç–µ /admin –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',reply_markup=inl_ikb())
    await Admin_Control.next()

async def edit_zapis(callback:types.CallbackQuery,callback_data: dict,state:FSMContext):
    result2 = await state.get_data()  # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏
    #–∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if callback_data['action']=='delet_time':
        result2 = await state.get_data()
        if result2['user_id']!='':
            await bot.send_message(result2['user_id'],f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {result2["day_date"]}, –í—Ä–µ–º—è: {result2["date_time"]} \n'
                                                     f'–ë—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
            await callback.message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',reply_markup=start_ikb())
        else:
            await callback.message.answer('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ',reply_markup=start_ikb())
        await k.delet_po_time(result2['id_date']) #—É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –ø–æ –∏–¥ –¥–∞—Ç–∞
    #–∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏
    elif callback_data['action']=='delet_zapis':
            if result2['user_id']!='':
                await k.delet_zapis(result2['id_date'])
                await bot.send_message(result2['user_id'],
                                       f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {result2["day_date"]}, –í—Ä–µ–º—è: {result2["date_time"]} \n'
                                       f'–ë—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
                await callback.message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=start_ikb())
            else:
                await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–ø–∏—Å–∏',reply_markup=start_ikb())
    else:
        result3=await k.count_daty(result2['day_date'])
        if result3>0:
            await callback.message.answer('–ù–∞ —ç—Ç—É –¥–∞—Ç—É –∏–º–µ—é—Ç—Å—è –∑–∞–ø–∏—Å–∏, —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –∏—Ö –≤ —Ä—É—á–Ω—É—é')
        else:
            await k.delet_daty(result2['day_date'])
            await callback.message.answer('–î–µ–Ω—å –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω')

async def show_klienti(message:types.Message,state:FSMContext):
    Text=''
    nazv=''

    result=await k.take_zapisi_people()
    for i in result: #i —ç—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–¥ –≤—Å–µ—Ö —É –∫–æ–≥–æ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        Text=''
        if i[0]!='': #–µ—Å–ª–∏ –∏–¥ –Ω–µ —Ä–∞–≤–µ–Ω –ø—É—Å—Ç–æ—Ç–µ
            print(i)


            Text+=f'–ò–º—è: {i[1]} –¢–µ–ª–µ—Ñ–æ–Ω: {i[2]}\n' \
                  f'–ó–∞–ø–∏—Å–∏:\n'
            l=await k.get_zapis(i[0]) #–ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –∏–¥
            try:
                usern=await k.take_username(i[0]) #–ø–æ–ª—É—á–∞—é —é–∑–µ—Ä–Ω–µ–π–º –ø–æ –∏–¥—É
                ur=f'https://t.me/{usern}'
                await message.answer(Text, reply_markup=get_user(l, ur))
            except:

                print('id ne naiden')

    await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await Admin_Control.edit_klient.set()

async def show_edit_klienti(callback:types.CallbackQuery,callback_data: dict,state:FSMContext):
        result23 = await state.get_data()
        print(callback_data['action'])
        if callback_data['action']=='write_user':
            print(result23['user_id'])

        else:
            await state.update_data(date_id=callback_data['action'])
            l=await k.get_one_zapis(callback_data['action'])
            print(l)
            await state.update_data(user_id=l[4])
            await state.update_data(l1=l[1])
            await state.update_data(l2=l[2])
            await state.update_data(l3=l[3])
            await callback.message.answer(f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
                                 f'{l[1]} {l[3]}. –í—Ä–µ–º—è: {l[2]}',reply_markup=danet())
            await Admin_Control.next()


async def da_or_net(callback:types.CallbackQuery,callback_data: dict,state:FSMContext):
    print('–î–æ—Ö–æ–¥–∏—Ç —Å—é–¥–∞')
    if callback_data['action']=='delet_time':
        result = await state.get_data()
        await k.delet_zapis(result['date_id'])
        await bot.send_message(result['user_id'],f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n'
                                                 f' {result["l1"]} {result["l3"]}.–í—Ä–µ–º—è: {result["l2"]}\n'
                                                 f'–ë—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        await callback.message.answer('–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ, –∫–ª–∏–µ–Ω—Ç –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω.\n'
                                      '–û–±–Ω–æ–≤–∏—Ç–µ –∑–∞–ø–∏—Å–∏',reply_markup=start_ikb())
        await state.finish()




def register_admin_noexcel_handler(dp: Dispatcher) -> None:  # —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–µ –≤ –º–µ–π–Ω, –∏ –∑–¥–µ—Å—å
    dp.register_message_handler(rych_start,text='–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    dp.register_message_handler(show_zapisi,text='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏',state='*')
    dp.register_callback_query_handler(take_zapis,dinam.filter(),state=Admin_Control.take_zapis)
    dp.register_callback_query_handler(edit_zapis,mem.filter(),state=Admin_Control.delet_zapis)
    dp.register_message_handler(show_klienti,text='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',state='*')
    dp.register_callback_query_handler(show_edit_klienti,klient.filter(),state=Admin_Control.edit_klient)
    dp.register_callback_query_handler(da_or_net,kewo.filter(),state=Admin_Control.final_klient)
